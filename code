import cv2
import numpy as np

# Load the pre-trained face detection model
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load the pre-trained CNN model for face detection
net = cv2.dnn.readNetFromCaffe("deploy.prototxt.txt", "res10_300x300_ssd_iter_140000_fp16.caffemodel")

# Function to detect faces in an image using CNN
def detect_faces_cnn(image):
    (h, w) = image.shape[:2]
    blob = cv2.dnn.blobFromImage(cv2.resize(image, (300, 300)), 1.0, (300, 300), (104.0, 177.0, 123.0))
    
    # Pass the blob through the CNN and obtain the detections
    net.setInput(blob)
    detections = net.forward()
    
    # Loop over the detections
    for i in range(0, detections.shape[2]):
        confidence = detections[0, 0, i, 2]
        
        # Filter out weak detections by ensuring the confidence is greater than the minimum confidence
        if confidence > 0.5:
            # Compute the coordinates of the bounding box for the detected face
            box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
            (startX, startY, endX, endY) = box.astype("int")
            
            # Draw the bounding box around the detected face
            cv2.rectangle(image, (startX, startY), (endX, endY), (0, 255, 0), 2)
    
    return image

# Main function
def main():
    # Load the image
    image_path = 'sample_image.jpg'  # Change this to your image path
    image = cv2.imread(image_path)
    
    # Detect faces in the image using CNN
    image_with_faces = detect_faces_cnn(image)
    
    # Display the image with detected faces
    cv2.imshow('Face Detection (CNN)', image_with_faces)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
